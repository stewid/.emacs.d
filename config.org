#+TITLE: Emacs Configuration
#+AUTHOR: Stefan Widgren
#+OPTIONS: toc:4 h:4

* Configuration

** Personal Information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Stefan Widgren"
      user-mail-address "stefan.widgren@gmail.com")
#+END_SRC
** Mode line

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (deftheme stewid
    "My custom theme.")

  (custom-theme-set-faces
   'stewid
   '(default ((t (:family "DejaVu Sans Mono"
                  :foundry "PfEd"
                  :width normal
                  :height 109
                  :weight normal
                  :slant normal
                  :underline nil
                  :overline nil
                  :strike-through nil
                  :box nil
                  :inverse-video nil
                  :foreground "black"
                  :background "white"
                  :stipple nil
                  :inherit nil))))
   '(cursor ((((background light)) (:background "black"))
             (((background dark)) (:background "white"))))
   '(fixed-pitch ((t (:family "Monospace"))))
   '(variable-pitch ((((type w32))
                      (:font "-outline-Arial-normal-normal-normal-sans-*-*-*-*-p-*-iso8859-1"))
                     (t (:family "Sans Serif"))))
   '(escape-glyph ((t (:foreground "#d55e00"))))
   '(minibuffer-prompt ((t (:weight bold :foreground "#0072b2"))))
   '(highlight ((t (:foreground "#0072b2" :background "#e5e5e5"))))
   '(region ((t (:background "#f8ec59"))))
   '(shadow ((((class color grayscale)
               (min-colors 88)
               (background light))
              (:foreground "grey50"))
             (((class color grayscale)
               (min-colors 88)
               (background dark))
              (:foreground "grey70"))
             (((class color)
               (min-colors 8)
               (background light))
              (:foreground "green"))
             (((class color)
               (min-colors 8)
               (background dark))
              (:foreground "yellow"))))
   '(secondary-selection ((t (:background "#e5e5e5"))))
   '(trailing-whitespace ((t (:background "#d55e00"))))
   '(font-lock-builtin-face ((t (:foreground "#0072b2"))))
   '(font-lock-comment-delimiter-face ((default (:inherit (font-lock-comment-face)))))
   '(font-lock-comment-face
     ((t (:weight semibold :slant italic :foreground "#009e73"))))
   '(font-lock-constant-face ((t (:weight bold :foreground "#d55e00"))))
   '(font-lock-doc-face
     ((t (:foreground "#009e73"
          :weight semibold
          :slant italic
          :inherit (font-lock-string-face)))))
   '(font-lock-function-name-face ((t (:weight semibold :foreground "blue"))))
   '(font-lock-keyword-face ((t (:weight bold :foreground "#56b4e9"))))
   '(font-lock-negation-char-face ((t nil)))
   '(font-lock-preprocessor-face
     ((t (:weight semi-bold :foreground "red" :inherit (font-lock-builtin-face)))))
   '(font-lock-regexp-grouping-backslash ((t (:inherit (bold)))))
   '(font-lock-regexp-grouping-construct ((t (:inherit (bold)))))
   '(font-lock-string-face ((t (:foreground "blue"))))
   '(font-lock-type-face ((t (:weight bold :foreground "#0072b2"))))
   '(font-lock-variable-name-face ((t (:weight bold :foreground "#e69f00"))))
   '(font-lock-warning-face ((t (:inherit (error)))))
   '(button ((t (:inherit (link)))))
   '(link ((t (:underline (:color foreground-color :style line) :foreground "#0072b2"))))
   '(link-visited ((t (:underline (:color foreground-color :style line) :foreground "#cc79a7"))))
   '(fringe ((t (:background "#f7f7f7"))))
   '(header-line ((default (:inherit (mode-line))) (((type tty)) (:underline (:color foreground-color :style line) :inverse-video nil)) (((class color grayscale) (background light)) (:box nil :foreground "grey20" :background "grey90")) (((class color grayscale) (background dark)) (:box nil :foreground "grey90" :background "grey20")) (((class mono) (background light)) (:underline (:color foreground-color :style line) :box nil :inverse-video nil :foreground "black" :background "white")) (((class mono) (background dark)) (:underline (:color foreground-color :style line) :box nil :inverse-video nil :foreground "white" :background "black"))))
   '(tooltip ((((class color)) (:inherit (variable-pitch) :foreground "black" :background "lightyellow")) (t (:inherit (variable-pitch)))))
   '(mode-line ((t (:box (:line-width -1 :color nil :style released-button) :foreground "black" :background "#e5e5e5"))))
   '(mode-line-buffer-id ((t (:weight bold))))
   '(mode-line-emphasis ((t (:weight bold))))
   '(mode-line-highlight ((((class color) (min-colors 88)) (:box (:line-width 2 :color "grey40" :style released-button))) (t (:inherit (highlight)))))
   '(mode-line-inactive ((t (:box (:line-width -1 :color nil :style released-button) :foreground "black" :background "#b0b0b0"))))
   '(isearch ((t (:foreground "white" :background "#d55e00"))))
   '(isearch-fail ((((class color) (min-colors 88) (background light)) (:background "RosyBrown1")) (((class color) (min-colors 88) (background dark)) (:background "red4")) (((class color) (min-colors 16)) (:background "red")) (((class color) (min-colors 8)) (:background "red")) (((class color grayscale)) (:foreground "grey")) (t (:inverse-video t))))
   '(lazy-highlight ((t (:foreground "white" :background "#cc79a7"))))
   '(match ((((class color) (min-colors 88) (background light)) (:background "yellow1")) (((class color) (min-colors 88) (background dark)) (:background "RoyalBlue3")) (((class color) (min-colors 8) (background light)) (:foreground "black" :background "yellow")) (((class color) (min-colors 8) (background dark)) (:foreground "white" :background "blue")) (((type tty) (class mono)) (:inverse-video t)) (t (:background "gray"))))
   '(next-error ((t (:inherit (region)))))
   '(query-replace ((t (:inherit (isearch))))))
  (provide-theme 'stewid)

#+END_SRC

** Delete trailing space

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t
  :ensure t
  :bind ("C-x g" . magit-status))
#+END_SRC

** R settings

#+BEGIN_SRC emacs-lisp
(use-package ess
  :defer t
  :ensure t
  :bind ("C-c r" . R))
(autoload 'R-mode "ess-site.el" "" t)
(add-to-list 'auto-mode-alist '("\\.R\\'" . R-mode))
(setq inferior-R-args "--no-restore-history --no-save ")
(setq ess-history-file nil)
#+END_SRC

** Backups
#+BEGIN_SRC emacs-lisp
(if (file-exists-p "~/.emacs.d/backups")
    nil
  (make-directory "~/.emacs.d/backups"))
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

** Column number
#+BEGIN_SRC emacs-lisp
;; Show column-number
(column-number-mode 1)
#+END_SRC
** Org mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :ensure t)
#+END_SRC

*** Key Bindings

#+BEGIN_SRC emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
(bind-key "C-c b" 'org-iswitchb)
#+END_SRC

** Windows resize
#+BEGIN_SRC emacs-lisp
;; http://emacswiki.org/emacs/WindowResize
(bind-key "S-C-<left>" 'shrink-window-horizontally)
(bind-key "S-C-<right>" 'enlarge-window-horizontally)
(bind-key "S-C-<up>" 'shrink-window)
(bind-key "S-C-<down>" 'enlarge-window)
#+END_SRC

** Key Bindings
#+BEGIN_SRC emacs-lisp
(bind-key "C-c s" 'shell)
(bind-key "C-c e" 'eshell)
(bind-key "C-c m" 'compile)
#+END_SRC

** C code
#+BEGIN_SRC emacs-lisp
(setq c-default-style "k&r"
      c-basic-offset 4)
(setq-default indent-tabs-mode nil)

(add-hook 'c-mode-common-hook
          (lambda()
            (local-set-key  (kbd "C-c o") 'ff-find-other-file)))
 #+END_SRC

** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)

  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<XF86WakeUp>") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
#+END_SRC
