#+TITLE: Emacs Configuration
#+AUTHOR: Stefan Widgren
#+OPTIONS: toc:4 h:4

* Configuration

** Personal Information

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Stefan Widgren"
      user-mail-address "stefan.widgren@gmail.com")
#+END_SRC
** Mode line

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'dichromacy)
#+END_SRC
** Delete trailing space

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t
  :ensure t
  :bind ("C-x g" . magit-status))
#+END_SRC

** R settings

#+BEGIN_SRC emacs-lisp
(use-package ess
  :defer t
  :ensure t
  :bind ("C-c r" . R))
(autoload 'R-mode "ess-site.el" "" t)
(add-to-list 'auto-mode-alist '("\\.R\\'" . R-mode))
(setq inferior-R-args "--no-restore-history --no-save ")
(setq ess-history-file nil)
#+END_SRC

** Backups
#+BEGIN_SRC emacs-lisp
(if (file-exists-p "~/.emacs.d/backups")
    nil
  (make-directory "~/.emacs.d/backups"))
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

** Column number
#+BEGIN_SRC emacs-lisp
;; Show column-number
(column-number-mode 1)
#+END_SRC
** Org mode
#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :ensure t)
#+END_SRC

*** Key Bindings

#+BEGIN_SRC emacs-lisp
(bind-key "C-c l" 'org-store-link)
(bind-key "C-c c" 'org-capture)
(bind-key "C-c a" 'org-agenda)
(bind-key "C-c b" 'org-iswitchb)
#+END_SRC

** Windows resize
#+BEGIN_SRC emacs-lisp
;; http://emacswiki.org/emacs/WindowResize
(bind-key "S-C-<left>" 'shrink-window-horizontally)
(bind-key "S-C-<right>" 'enlarge-window-horizontally)
(bind-key "S-C-<up>" 'shrink-window)
(bind-key "S-C-<down>" 'enlarge-window)
#+END_SRC

** Key Bindings
#+BEGIN_SRC emacs-lisp
(bind-key "C-c s" 'shell)
(bind-key "C-c e" 'eshell)
(bind-key "C-c m" 'compile)
#+END_SRC

** C code
#+BEGIN_SRC emacs-lisp
(setq c-default-style "k&r"
      c-basic-offset 4)
(setq-default indent-tabs-mode nil)

(add-hook 'c-mode-common-hook
          (lambda()
            (local-set-key  (kbd "C-c o") 'ff-find-other-file)))
 #+END_SRC

** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t)

  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<XF86WakeUp>") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
#+END_SRC
